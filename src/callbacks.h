gboolean tea_init (gpointer data);

void scan_links (void);
void on_mni_funx_ins_time (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_Markup_comment (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_Markup_br (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_view_wrap (GtkMenuItem *menuitem, gpointer user_data);
void on_notebook1_switch_page (GtkNotebook *notebook, GtkWidget *page, guint page_num, gpointer user_data);
void on_mni_file_save_version (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_reverse (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_case_locase_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_case_upcase_activate (GtkMenuItem *menuitem, gpointer user_data); 
void on_mni_new_file_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_file_open_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_file_save_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_file_save_as_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_out_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_nav_block_start (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_nav_block_end (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_Markup_bold_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_Markup_italic_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_Markup_underline_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_Markup_para_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_Markup_header_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_file_close_current (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_Functions_number_arabian2roman (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_view_show_line_numbers (GtkMenuItem *menuitem, gpointer user_data);
void on_button_close (GtkWidget *wid, gpointer data);
void on_mni_html_default_template ();
void on_mni_file_save_session (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_open_session_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_session_file_open_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_antispam (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_Functions_number_hex2dec (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_config_open (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_open_in_browser (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_Markup_link_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_utils_stats (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_utils_add_encodings_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_Functions_number_bin2dec (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_file_open_at_cursor (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_Markup_nbsp (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_undo (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_redo (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_markup_select_color_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_image_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_html_strip_tags (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_html_enclose_link ();
gboolean on_ent_search_key_press_event (GtkWidget *widget, GdkEventKey *event, gpointer user_data);
void on_mni_quest_find (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_quest_find_next (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_func_strings_removeblanks (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_func_strings_sort (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_func_strings_enclose (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_func_strings_rev (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_search_repall (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_recent_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_about_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_file_new_from_template (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_file_save_as_template_activate (GtkMenuItem *menuitem, gpointer user_data);
void show_save_as_dlg (int mode);
void on_mni_file_edit_at_cursor (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_get_links (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_new_link_select (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_co_select (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_markup_align (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_html_make_table ();
void on_mni_file_revert_to_saved (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_goto_line (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_convert_ascii_2_html (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_func_filter_exclude_from_list (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_func_filter_antiexclude_from_list (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_html_calc_weight (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_get_src (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_file_backup (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_file_add_bookmark (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_file_open_bookmark (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_real_recent_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_test (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_refresh_hl (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_make_numbering (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_open_hotkeys (GtkMenuItem *menuitem, gpointer user_data);
void tea_win_on_drag_data_lcb(GtkWidget *widget, GdkDragContext *context, gint x, gint y, GtkSelectionData *data, guint info, guint time); 
void set_dnd_accept (GtkWidget *widget);
gboolean on_tea_window_delete_event (GtkWidget *widget, GdkEvent *event, gpointer user_data);
void on_mni_snippet_click (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_snippet_file_open_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_file_save_as_snippet_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_dump_menu (GtkMenuItem *menuitem, gpointer user_data);
GtkWidget* create_wnd_imgviewer (gchar *f);

void on_mni_nav_goto_prev_tab (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_nav_focus_to_text (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_nav_focus_to_famous (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_tools_unitaz_sort (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_tools_unitaz_plain (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_str_kill_dups (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_extract_words (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_tools_unitaz_sort_by_count (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_edit_copy_all (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_edit_copy_current_url (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_edit_replace_with_clipboard (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_count_string_list (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_paste_to_new (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_copy_to_new (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_cut_to_new (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_shuffle_strings (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_tools_unitaz_sort_caseinsens (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_tools_unitaz_sort_by_count_caseinsens (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_cure (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_tabs_to_spaces (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_spaces_to_tabs (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_edit_delete_current_line (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_paste (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_edit_copy (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_edit_cut (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_edit_delete (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_edit_select_all (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_sort_case_insensetive (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_new_filenav (GtkMenuItem *menuitem, gpointer user_data);
void on_but_refresh (void);
void on_mni_new_file_open_select_enc (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_kill_formatting (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_wrap_raw (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_wrap_on_spaces (GtkMenuItem *menuitem, gpointer user_data);
void on_doit_button (GtkButton *button, gpointer user_data);
void on_mni_kill_formatting_on_each_line (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_file_crapbook (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_spellcheck (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_filter_kill_lesser (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_filter_kill_more_than (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_func_strings_sort_by_q (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_tabs_menuitem_click (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_show_images_in_text (GtkMenuItem *menuitem, gpointer user_data);
static GtkWidget* lookup_widget2 (GtkContainer *widget, const gchar *widget_name);
void on_mni_nav_goto_recent_tab (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_nav_goto_next_tab (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_view_hide_highlighting (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_nav_goto_first_tab (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_nav_goto_last_tab (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_nav_goto_selection (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_quest_find_ncase (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_quest_find_next_ncase (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_user_menu_open (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_user_menu_item (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_find_and_replace_wnd (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_rtfm (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_crackerize (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_markup_stuff (GtkMenuItem *menuitem, gpointer user_data); 
void on_mni_show_options (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_help_item (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_eol_to_crlf (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_eol_to_lf (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_templ_file_open_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_upcase_each_first_letter_ofw (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_nav_mplayer_jump (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_open_open_movie (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_open_base64_activate (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_insert_doctype (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_entity (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_sessions_click (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_templates_click (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_morse_encode (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_morse_decode (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_set_hl_mode (GtkMenuItem *menuitem, gpointer user_data);
void select_color_cb_delete (GtkWidget *widget,gpointer user_data);
gboolean on_editor_keypress (GtkWidget *widget, GdkEventKey *event, gpointer data);
void on_mni_unindent (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_indent (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_autorep_file_open (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_strings_remove_trailing_whitespaces (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_strings_remove_leading_whitespaces (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_edit_append_to_crapbook (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_load_last_file (GtkMenuItem *menuitem, gpointer user_data);
void on_source_header_switch (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_show_project_props (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_project_new (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_project_save_as (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_project_open (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_show_project_save (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_project_make (GtkMenuItem *menuitem, gpointer user_data);
void on_mni_show_project_run (GtkMenuItem *menuitem, gpointer user_data);
void file_new (void);
void file_save (void);
void file_save_as (void);
void file_open (void);
void edit_copy (void);
void edit_cut (void);
void edit_paste (void);
void show_options (void);
void print_bash (void);
void et_bash(void);
void gen_xmessage             (void);
void ou_bash             (void);
void reNULL_bash             (void);
void reECRASER_bash             (void);
void reRAJOUTER_bash             (void);
void boucle_bash             (void);
void fichier_ligne_bash             (void);
void test1             (void);
void test12             (void);
void gen_rpm             (void);
void test2             (void);
void test22             (void);
void test3             (void);
void test4             (void);
void test5             (void);
void test6             (void);
void test7             (void);
void test8             (void);
void test24             (void);
void test25             (void);
void test23             (void);
void test9             (void);
void gen_smbmount             (void);
void test10             (void);
void test11             (void);
void rsync_gen             (void);
void echo_bash             (void);
void gen_read             (void);
void com             (void);
void redi_erreur             (void);
void if_bash             (void);
void fond_bash             (void);
void redi_2             (void);
void else_bash             (void);
void skeleton             (void);
GtkWidget* window_grep (void);
void grep             (void);
GtkWidget* sed (void);
void sed_apl             (void);
GtkWidget* case_window (void);
void case_build (void);
GtkWidget* awk (void);
void  awk_apl             (void);
void file_save_bug (void);
GtkWidget* selection_path (void);
GtkWidget* win_scp (void);
void gen_scp            (void);
void start_perl_script            (void);
void perl_print            (void);
void perl_if            (void);
void perl_if_else            (void);
void perl_while            (void);
void perl_for            (void);
void perl_foreach            (void);
void perl_do_while            (void);
void perl_fonction            (void);
void perl_fonction_param            (void);
void perl_exit            (void);
void perl_die            (void);
void exe            (void);
void perl_chop      (void);
void perl_chomp      (void);
void perl_lenght      (void);
void perl_uc     (void);
void perl_lc     (void);
void perl_ucfirst     (void);
void scan_include     (void);
void perl_writh           (void);
void perl_read           (void);
void perl_regular           (void);
void perl_replace           (void);
void echo_php           (void);
GtkWidget* help_php_window (void);
GtkWidget* help_mysql(void);
GtkWidget* Aide_BASH (void);
GtkWidget* w_sftp_mount (void);
void on_format_button_clicked (GtkWidget *button, GtkTextBuffer *buffer);
void open_gimp (void);
void umount_sftp (void);
void on_mni_file_todo (GtkMenuItem* menuitem, gpointer user_data);
void on_mni_file_myadmin (GtkMenuItem* menuitem, gpointer user_data);
static GtkWidget * create_view_and_model (char clef[50]);
void  on_changed(GtkWidget *widget, gpointer statusbar) ;
GtkWidget* centre_perl (void);
void on_execut_script (void);
void on_format_line_bg (GtkWidget *button, GtkTextBuffer *buffer);
void mount_ftp (void);
GtkWidget* w_ftp_mount (void);
gchar *tampon_sftp;
void open_include             (void);
void gen_doc_html (void);
gboolean on_editor_keyrelease (GtkWidget *widget, GdkEventKey *event, gpointer data);
void delete_autocomp_tips();
void add_word_autocomp_file(void);
void on_mni_autocomp_file_open (GtkMenuItem *menuitem,gpointer user_data);
void keyrelase_search(void);
